import bibtex.BibtexEntry
import bibtex.Canonicalizer
import org.parboiled.scala.ReportingParseRunner
import bibtex.BibtexParser

object GeneratePubWeb {
  def main(args: Array[String]) {
    val parser = new BibtexParser
    val canon = Canonicalizer.readFromFile("authors.xml")
    val urlMap = Canonicalizer.urlMap("authors.xml")
    val input = io.Source.fromFile(args(0))
    val runner = ReportingParseRunner(parser.file)

    val bibtexEntries: List[BibtexEntry] =
      runner.run(input).result.get.sortBy(_.year.toInt)

    val pubFile = io.Source.fromFile("publications.html").mkString
    val startText = "BEGIN AUTOGENERATED PUBLICATION LIST"
    val endText = "END AUTOGENERATED PUBLICATION LIST"
    val lines = pubFile.split('\n')
    val startIndex = lines.indexWhere(s => s.indexOfSlice(startText) != -1)
    val endIndex = lines.indexWhere(s => s.indexOfSlice(endText) != -1)

    lines.take(startIndex+1).foreach { line => println(line) }

    bibtexEntries.zipWithIndex.foreach { case (b, i) => {
      b.canon = Some(canon)
      b.urlResolver = urlMap
      println(b.toHtml("r" + (i % 2)))
    }}

    lines.drop(endIndex).foreach { line => println(line) }
  }
}
